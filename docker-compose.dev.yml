version: '3.8'

services:
  # Development Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: text_to_audiobook_app_dev
    depends_on:
      - redis
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OLLAMA_URL=http://host.docker.internal:11434/api/generate
      - LOG_LEVEL=DEBUG
      - CONSOLE_LOG_LEVEL=DEBUG
      - LLM_DEBUG_LOGGING=true
      - PYTHONPATH=/app
      - PROCESSING_MODE=local
      - DEBUG_MODE=true
      - HOT_RELOAD=true
    volumes:
      - ./:/app
      - ./input:/app/input
      - ./output:/app/output
      - ./logs:/app/logs
      - ./config:/app/config
      - /app/venv
    ports:
      - "8000:8000"
    networks:
      - text_to_audiobook_dev_network
    restart: unless-stopped
    stdin_open: true
    tty: true
    command: bash

  # Redis for Development
  redis:
    image: redis:7-alpine
    container_name: text_to_audiobook_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - text_to_audiobook_dev_network
    restart: unless-stopped

  # Lightweight Kafka for Development
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: text_to_audiobook_kafka_dev
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    volumes:
      - kafka_dev_data:/var/lib/kafka/data
    networks:
      - text_to_audiobook_dev_network
    restart: unless-stopped

  # Zookeeper for Development
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: text_to_audiobook_zookeeper_dev
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: INFO
    volumes:
      - zookeeper_dev_data:/var/lib/zookeeper/data
    networks:
      - text_to_audiobook_dev_network
    restart: unless-stopped

  # Kafka UI for Development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: text_to_audiobook_kafka_ui_dev
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local-dev
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - text_to_audiobook_dev_network
    restart: unless-stopped

  # Redis Commander for Development
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: text_to_audiobook_redis_commander_dev
    depends_on:
      - redis
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - text_to_audiobook_dev_network
    restart: unless-stopped

  # Lightweight Spark for Development (Optional)
  spark-master:
    image: bitnami/spark:3.4.0
    container_name: text_to_audiobook_spark_master_dev
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_OPTS=-Dspark.deploy.defaultCores=1
    ports:
      - "7077:7077"
      - "8082:8080"
    volumes:
      - spark_master_dev_data:/opt/bitnami/spark/work
    networks:
      - text_to_audiobook_dev_network
    restart: unless-stopped
    profiles:
      - spark

  # Development Tools Container
  dev-tools:
    image: python:3.12-slim
    container_name: text_to_audiobook_dev_tools
    volumes:
      - ./:/app
    working_dir: /app
    networks:
      - text_to_audiobook_dev_network
    profiles:
      - tools
    command: sleep infinity

networks:
  text_to_audiobook_dev_network:
    driver: bridge

volumes:
  redis_dev_data:
  kafka_dev_data:
  zookeeper_dev_data:
  spark_master_dev_data: