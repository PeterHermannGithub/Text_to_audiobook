# Text-to-Audiobook Project Configuration
# Unified configuration for build tools, linting, formatting, and type checking

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "text-to-audiobook"
version = "1.0.0"
description = "Enterprise AI-powered audiobook generation system with distributed processing"
authors = [
    {name = "Text-to-Audiobook Contributors"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["audiobook", "text-to-speech", "ai", "nlp", "distributed-processing"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "PyMuPDF>=1.23.0",
    "python-docx>=1.1.0",
    "google-cloud-aiplatform>=1.55.0",
    "google-generativeai>=0.7.0",
    "google-cloud-texttospeech>=2.16.0",
    "pydub>=0.25.0",
    "EbookLib>=0.18",
    "mobi>=0.3",
    "beautifulsoup4>=4.12.0",
    "requests>=2.32.0",
    "tqdm>=4.66.0",
    "tenacity>=8.2.0",
    "fuzzywuzzy>=0.18.0",
    "python-Levenshtein>=0.25.0",
    "spacy>=3.7.0",
    "pyspark>=3.4.0",
    "kafka-python>=2.0.0",
    "redis>=4.5.0",
    "prometheus-client>=0.15.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.12.0",
    "flake8>=6.1.0",
    "mypy>=1.8.0",
    "isort>=5.13.0",
    "bandit>=1.7.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.5.0",
    "pre-commit>=3.6.0",
    "jupyter>=1.0.0",
]

[project.urls]
homepage = "https://github.com/your-org/text-to-audiobook"
repository = "https://github.com/your-org/text-to-audiobook"
documentation = "https://text-to-audiobook.readthedocs.io"
changelog = "https://github.com/your-org/text-to-audiobook/blob/main/CHANGELOG.md"

[project.scripts]
text-to-audiobook = "app:main"

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv
  | logs
  | output
  | input
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["**/logs/*", "**/output/*", "**/input/*", "**/venv/*"]
known_first_party = ["src", "config", "tests"]
known_third_party = [
    "kafka", "pyspark", "redis", "prometheus_client", "spacy", 
    "requests", "tqdm", "tenacity", "fitz", "docx", "ebooklib",
    "google", "pytest", "black", "mypy", "flake8"
]

# MyPy Configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true

# Exclude patterns
exclude = [
    '^venv/',
    '^build/',
    '^dist/',
    '^logs/',
    '^output/',
    '^input/',
    '\.pyc$',
]

# Per-module configuration
[[tool.mypy.overrides]]
module = [
    "kafka.*",
    "pyspark.*",
    "spacy.*",
    "fitz.*",
    "docx.*",
    "ebooklib.*",
    "mobi.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:reports/coverage_html",
    "--cov-report=xml:reports/coverage.xml",
    "--cov-fail-under=80",
    "--junitxml=reports/junit.xml",
    "--html=reports/pytest_report.html",
    "--self-contained-html",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:kafka",
    "ignore::UserWarning:pyspark",
    "ignore::UserWarning:py4j",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "benchmark: Benchmark tests",
    "slow: Slow running tests",
    "external: Tests requiring external services",
    "smoke: Smoke tests for basic functionality",
    "e2e: End-to-end tests",
    "regression: Regression tests",
    "spark: Tests requiring Spark session",
    "kafka: Tests requiring Kafka services",
    "redis: Tests requiring Redis services",
    "llm: Tests requiring LLM services",
    "cache: Tests for caching functionality",
    "validation: Tests for validation components",
    "monitoring: Tests for monitoring and metrics",
    "distributed: Tests for distributed processing components",
]

# Coverage Configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/build/*",
    "*/dist/*",
    "*/.tox/*",
    "*/logs/*",
    "*/output/*",
    "*/input/*",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
    "@overload",
    "class .*\\bProtocol\\):",
    "assert_never\\(",
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "reports/coverage_html"
show_contexts = true

[tool.coverage.xml]
output = "reports/coverage.xml"

# Bandit Security Configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "build", "dist", "logs", "output", "input"]
skips = ["B101", "B601"]  # Skip assert and shell usage warnings in tests

# Additional tool configurations can be added here
[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/tests/*"]